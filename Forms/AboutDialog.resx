<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="picIcon.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>